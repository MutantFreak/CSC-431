module Parser
// Implementation file for parser generated by fsyacc
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"


open AST


# 11 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | NEWTok
  | FUNCTIONTok
  | STRINGTok of (string)
  | IFTok
  | ELSETok
  | WHILETok
  | TRUETok
  | FALSETok
  | IDTok of (string)
  | BANGTok
  | DOTTok
  | COMMATok
  | LPARENTok
  | RPARENTok
  | LCURLYTok
  | RCURLYTok
  | CARETTok
  | DOUBLEEQTok
  | EOFTok
  | SEMICOLONTok
  | GTTok
  | LTTok
  | GEQTok
  | LEQTok
  | EQTok
  | ANDTok
  | ORTok
  | PLUSTok
  | MINUSTok
  | TIMESTok
  | DIVTok
  | DOUBLETok of (double)
  | INTTok of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_NEWTok
    | TOKEN_FUNCTIONTok
    | TOKEN_STRINGTok
    | TOKEN_IFTok
    | TOKEN_ELSETok
    | TOKEN_WHILETok
    | TOKEN_TRUETok
    | TOKEN_FALSETok
    | TOKEN_IDTok
    | TOKEN_BANGTok
    | TOKEN_DOTTok
    | TOKEN_COMMATok
    | TOKEN_LPARENTok
    | TOKEN_RPARENTok
    | TOKEN_LCURLYTok
    | TOKEN_RCURLYTok
    | TOKEN_CARETTok
    | TOKEN_DOUBLEEQTok
    | TOKEN_EOFTok
    | TOKEN_SEMICOLONTok
    | TOKEN_GTTok
    | TOKEN_LTTok
    | TOKEN_GEQTok
    | TOKEN_LEQTok
    | TOKEN_EQTok
    | TOKEN_ANDTok
    | TOKEN_ORTok
    | TOKEN_PLUSTok
    | TOKEN_MINUSTok
    | TOKEN_TIMESTok
    | TOKEN_DIVTok
    | TOKEN_DOUBLETok
    | TOKEN_INTTok
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Prog
    | NONTERM_Expr
    | NONTERM_Term
    | NONTERM_Factor

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | NEWTok  -> 0 
  | FUNCTIONTok  -> 1 
  | STRINGTok _ -> 2 
  | IFTok  -> 3 
  | ELSETok  -> 4 
  | WHILETok  -> 5 
  | TRUETok  -> 6 
  | FALSETok  -> 7 
  | IDTok _ -> 8 
  | BANGTok  -> 9 
  | DOTTok  -> 10 
  | COMMATok  -> 11 
  | LPARENTok  -> 12 
  | RPARENTok  -> 13 
  | LCURLYTok  -> 14 
  | RCURLYTok  -> 15 
  | CARETTok  -> 16 
  | DOUBLEEQTok  -> 17 
  | EOFTok  -> 18 
  | SEMICOLONTok  -> 19 
  | GTTok  -> 20 
  | LTTok  -> 21 
  | GEQTok  -> 22 
  | LEQTok  -> 23 
  | EQTok  -> 24 
  | ANDTok  -> 25 
  | ORTok  -> 26 
  | PLUSTok  -> 27 
  | MINUSTok  -> 28 
  | TIMESTok  -> 29 
  | DIVTok  -> 30 
  | DOUBLETok _ -> 31 
  | INTTok _ -> 32 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_NEWTok 
  | 1 -> TOKEN_FUNCTIONTok 
  | 2 -> TOKEN_STRINGTok 
  | 3 -> TOKEN_IFTok 
  | 4 -> TOKEN_ELSETok 
  | 5 -> TOKEN_WHILETok 
  | 6 -> TOKEN_TRUETok 
  | 7 -> TOKEN_FALSETok 
  | 8 -> TOKEN_IDTok 
  | 9 -> TOKEN_BANGTok 
  | 10 -> TOKEN_DOTTok 
  | 11 -> TOKEN_COMMATok 
  | 12 -> TOKEN_LPARENTok 
  | 13 -> TOKEN_RPARENTok 
  | 14 -> TOKEN_LCURLYTok 
  | 15 -> TOKEN_RCURLYTok 
  | 16 -> TOKEN_CARETTok 
  | 17 -> TOKEN_DOUBLEEQTok 
  | 18 -> TOKEN_EOFTok 
  | 19 -> TOKEN_SEMICOLONTok 
  | 20 -> TOKEN_GTTok 
  | 21 -> TOKEN_LTTok 
  | 22 -> TOKEN_GEQTok 
  | 23 -> TOKEN_LEQTok 
  | 24 -> TOKEN_EQTok 
  | 25 -> TOKEN_ANDTok 
  | 26 -> TOKEN_ORTok 
  | 27 -> TOKEN_PLUSTok 
  | 28 -> TOKEN_MINUSTok 
  | 29 -> TOKEN_TIMESTok 
  | 30 -> TOKEN_DIVTok 
  | 31 -> TOKEN_DOUBLETok 
  | 32 -> TOKEN_INTTok 
  | 35 -> TOKEN_end_of_input
  | 33 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_Prog 
    | 3 -> NONTERM_Expr 
    | 4 -> NONTERM_Expr 
    | 5 -> NONTERM_Expr 
    | 6 -> NONTERM_Expr 
    | 7 -> NONTERM_Term 
    | 8 -> NONTERM_Term 
    | 9 -> NONTERM_Term 
    | 10 -> NONTERM_Factor 
    | 11 -> NONTERM_Factor 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 35 
let _fsyacc_tagOfErrorTerminal = 33

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | NEWTok  -> "NEWTok" 
  | FUNCTIONTok  -> "FUNCTIONTok" 
  | STRINGTok _ -> "STRINGTok" 
  | IFTok  -> "IFTok" 
  | ELSETok  -> "ELSETok" 
  | WHILETok  -> "WHILETok" 
  | TRUETok  -> "TRUETok" 
  | FALSETok  -> "FALSETok" 
  | IDTok _ -> "IDTok" 
  | BANGTok  -> "BANGTok" 
  | DOTTok  -> "DOTTok" 
  | COMMATok  -> "COMMATok" 
  | LPARENTok  -> "LPARENTok" 
  | RPARENTok  -> "RPARENTok" 
  | LCURLYTok  -> "LCURLYTok" 
  | RCURLYTok  -> "RCURLYTok" 
  | CARETTok  -> "CARETTok" 
  | DOUBLEEQTok  -> "DOUBLEEQTok" 
  | EOFTok  -> "EOFTok" 
  | SEMICOLONTok  -> "SEMICOLONTok" 
  | GTTok  -> "GTTok" 
  | LTTok  -> "LTTok" 
  | GEQTok  -> "GEQTok" 
  | LEQTok  -> "LEQTok" 
  | EQTok  -> "EQTok" 
  | ANDTok  -> "ANDTok" 
  | ORTok  -> "ORTok" 
  | PLUSTok  -> "PLUSTok" 
  | MINUSTok  -> "MINUSTok" 
  | TIMESTok  -> "TIMESTok" 
  | DIVTok  -> "DIVTok" 
  | DOUBLETok _ -> "DOUBLETok" 
  | INTTok _ -> "INTTok" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | NEWTok  -> (null : System.Object) 
  | FUNCTIONTok  -> (null : System.Object) 
  | STRINGTok _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IFTok  -> (null : System.Object) 
  | ELSETok  -> (null : System.Object) 
  | WHILETok  -> (null : System.Object) 
  | TRUETok  -> (null : System.Object) 
  | FALSETok  -> (null : System.Object) 
  | IDTok _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BANGTok  -> (null : System.Object) 
  | DOTTok  -> (null : System.Object) 
  | COMMATok  -> (null : System.Object) 
  | LPARENTok  -> (null : System.Object) 
  | RPARENTok  -> (null : System.Object) 
  | LCURLYTok  -> (null : System.Object) 
  | RCURLYTok  -> (null : System.Object) 
  | CARETTok  -> (null : System.Object) 
  | DOUBLEEQTok  -> (null : System.Object) 
  | EOFTok  -> (null : System.Object) 
  | SEMICOLONTok  -> (null : System.Object) 
  | GTTok  -> (null : System.Object) 
  | LTTok  -> (null : System.Object) 
  | GEQTok  -> (null : System.Object) 
  | LEQTok  -> (null : System.Object) 
  | EQTok  -> (null : System.Object) 
  | ANDTok  -> (null : System.Object) 
  | ORTok  -> (null : System.Object) 
  | PLUSTok  -> (null : System.Object) 
  | MINUSTok  -> (null : System.Object) 
  | TIMESTok  -> (null : System.Object) 
  | DIVTok  -> (null : System.Object) 
  | DOUBLETok _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INTTok _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 3us; 65535us; 0us; 2us; 8us; 9us; 11us; 12us; 3us; 65535us; 0us; 3us; 8us; 3us; 11us; 3us; 4us; 65535us; 0us; 13us; 5us; 6us; 8us; 13us; 11us; 13us; 6us; 65535us; 0us; 18us; 5us; 18us; 8us; 18us; 11us; 18us; 14us; 15us; 16us; 17us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 7us; 11us; 16us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 2us; 2us; 3us; 1us; 2us; 1us; 3us; 3us; 3us; 7us; 8us; 2us; 4us; 10us; 1us; 4us; 1us; 4us; 2us; 5us; 11us; 1us; 5us; 1us; 5us; 3us; 6us; 7us; 8us; 1us; 7us; 1us; 7us; 1us; 8us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 9us; 11us; 13us; 17us; 20us; 22us; 24us; 27us; 29us; 31us; 35us; 37us; 39us; 41us; 43us; 45us; 47us; |]
let _fsyacc_action_rows = 21
let _fsyacc_actionTableElements = [|2us; 32768us; 31us; 10us; 32us; 7us; 0us; 49152us; 0us; 16385us; 2us; 32768us; 18us; 4us; 27us; 5us; 0us; 16386us; 2us; 32768us; 31us; 20us; 32us; 19us; 2us; 16387us; 29us; 14us; 30us; 16us; 1us; 16394us; 19us; 8us; 2us; 32768us; 31us; 10us; 32us; 7us; 0us; 16388us; 1us; 16395us; 19us; 11us; 2us; 32768us; 31us; 10us; 32us; 7us; 0us; 16389us; 2us; 16390us; 29us; 14us; 30us; 16us; 2us; 32768us; 31us; 20us; 32us; 19us; 0us; 16391us; 2us; 32768us; 31us; 20us; 32us; 19us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 0us; 16395us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 3us; 4us; 5us; 8us; 9us; 12us; 15us; 17us; 20us; 21us; 23us; 26us; 27us; 30us; 33us; 34us; 37us; 38us; 39us; 40us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 2us; 3us; 3us; 3us; 1us; 3us; 3us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 3us; 3us; 4us; 4us; 4us; 5us; 5us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 65535us; 16386us; 65535us; 65535us; 65535us; 65535us; 16388us; 65535us; 65535us; 16389us; 65535us; 65535us; 16391us; 65535us; 16392us; 16393us; 16394us; 16395us; |]
let _fsyacc_reductions ()  =    [| 
# 274 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  AST.exp )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 283 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                                   (BeginExp _1) 
                   )
# 39 "Parser.fsy"
                 :  AST.exp ));
# 294 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                          [_1] 
                   )
# 47 "Parser.fsy"
                 : 'Prog));
# 305 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                                           (PrimExp(PlusP,[_1; _3])) 
                   )
# 50 "Parser.fsy"
                 : 'Expr));
# 317 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                                                 (IntExp _1) :: _3 
                   )
# 51 "Parser.fsy"
                 : 'Expr));
# 329 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : double)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                                                    (DoubleExp _1) :: _3 
                   )
# 52 "Parser.fsy"
                 : 'Expr));
# 341 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                                           Term (_1) 
                   )
# 53 "Parser.fsy"
                 : 'Expr));
# 352 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Term)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Factor)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                                             (PrimExp (TimesP, [_1; _3])) 
                   )
# 56 "Parser.fsy"
                 : 'Term));
# 364 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Term)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Factor)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                                           (PrimExp (DivP, [_1; _3])) 
                   )
# 57 "Parser.fsy"
                 : 'Term));
# 376 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Factor)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                                          Factor (_1) 
                   )
# 58 "Parser.fsy"
                 : 'Term));
# 387 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                                          IntExp (_1) 
                   )
# 61 "Parser.fsy"
                 : 'Factor));
# 398 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : double)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                                          DoubleExp (_1) 
                   )
# 62 "Parser.fsy"
                 : 'Factor));
|]
# 410 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 36;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf :  AST.exp  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
