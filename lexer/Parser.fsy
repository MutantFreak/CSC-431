%{

open AST

%}

// The start token becomes a parser function in the compiled code:
%start start

// These are the terminal tokens of the grammar along with the types of
// the data carried by each token:
%token <int> INTTok
%token <double> DOUBLETok
%token ANDTok ORTok PLUSTok MINUSTok TIMESTok DIVTok
%token GTTok LTTok GEQTok LEQTok EQTok
%token SEMICOLONTok 
%token EOFTok

//OUR CODE
%token CARETTok DOUBLEEQTok 
%token LPARENTok RPARENTok LCURLYTok RCURLYTok
%token BANGTok DOTTok COMMATok
%token <string> IDTok 
%token TRUETok FALSETok
%token IFTok ELSETok WHILETok
%token <string> STRINGTok
%token NEWTok FUNCTIONTok VARTok
%token RETURNTok PRINTTok READLINETok
%token ISINTTok ISBOOLTok ISDOUBLETok ISVOIDTok ISSTRINGTok ISCLOSURETok ISARRAYTok ISOBJECTTok
%token INSTANCEOFTok
%token NEWARRAYTok VIEWARRAYTok ARRAYREFTok ARRAYSETTok ARRAYMAXTok


// This is the type of the data produced by a successful reduction of the 'start'
// symbol:
// JBC: note that since this gets put into the interface file, it must be fully qualified.
%type < AST.exp > start

%%

// These are the rules of the grammar along with the F# code of the 
// actions executed as rules are reduced.  In this case the actions 
// produce data using F# data construction terms.
start: Prog                                    { BeginExp ($1) }

Prog:
  | StmtSeq                                             { $1 }
  | EOFTok                                              { [] }
  
StmtSeq:
// An expression followed by a semicolon.
  | Expr SEMICOLONTok StmtSeq                                                                              { $1 :: $3 }
// if 
  | IFTok LPARENTok Expr RPARENTok LCURLYTok StmtSeq RCURLYTok StmtSeq                                     { IfExp ($3, BeginExp ($6), BeginExp ([]) ) :: $8}
// if & else
  | IFTok LPARENTok Expr RPARENTok LCURLYTok StmtSeq RCURLYTok ELSETok LCURLYTok StmtSeq RCURLYTok StmtSeq { IfExp ($3, BeginExp ($6), BeginExp ($10) ) :: $12 }
// while loops with body
  | WHILETok LPARENTok Expr RPARENTok LCURLYTok StmtSeq RCURLYTok StmtSeq                                  { WhileExp ($3, BeginExp ($6) ) :: $8 }
// var declaration
  | VARTok IDTok EQTok Expr SEMICOLONTok StmtSeq                                                           { [LetExp ($2, $4, BeginExp ($6))] }
// var assignment
  | IDTok EQTok Expr SEMICOLONTok StmtSeq                                                                  { SetExp ($1, $3) :: $5 }
// return expressions
  | RETURNTok Expr SEMICOLONTok StmtSeq                                                                    { ReturnExp ($2) :: $4 }
// field setting eg: x.y = 3
  | Expr DOTTok IDTok EQTok Expr StmtSeq                                                                   { FieldSetExp ($1, $3, $5) :: $6 }
// Function declarations, with parameters
  | FUNCTIONTok IDTok LPARENTok Params RPARENTok LCURLYTok StmtSeq RCURLYTok StmtSeq                       { [LetrecExp ([($2, $4, BeginExp ($7))], BeginExp($9))] }
  |                                                                                                        { [] }

// Expr is level7
Expr:
    //TODO: put parentheses here
  | Level7                                      { $1 }

Params:
  | Param Params                                { $1 :: $2 }
      // No params
  |                                             { [] }

Param:
  | IDTok COMMATok                              { $1 }
  | IDTok                                       { $1 }


Level1:
    | Level1 DOTTok IDTok                   { FieldRefExp ($1, $3) }
    | TRUETok                               { (BoolExp (true)) }
    | FALSETok                              { (BoolExp (false)) }
    | INTTok                                { (IntExp $1) }
    | DOUBLETok                             { (DoubleExp $1) }
    | IDTok                                 { (ID $1) }
    | STRINGTok                             { (StringExp $1) }
    | LPARENTok Expr RPARENTok              { ($2) }

Level2:
    | BANGTok Level2                        { PrimExp (NotP, [$2]) }
    | Level1                                { $1 }

Level3:
    | Level3 TIMESTok Level2                { PrimExp (TimesP, [$1; $3]) }
    | Level3 DIVTok Level2                  { PrimExp (DivP, [$1; $3]) }
    | Level2                                { $1 }

Level4:
    | Level4 PLUSTok Level3                 { PrimExp (PlusP, [$1; $3]) }
    | Level4 MINUSTok Level3                { PrimExp (MinusP, [$1; $3]) }
    | Level3                                { $1 }

Level5:
    | Level5 GTTok Level4                   { PrimExp (GTP, [$1; $3]) }
    | Level5 LTTok Level4                   { PrimExp (LTP, [$1; $3]) }
    | Level5 GEQTok Level4                  { PrimExp (GEqP, [$1; $3]) }
    | Level5 LEQTok Level4                  { PrimExp (LEqP, [$1; $3]) }
    | Level4                                { $1 }

Level6:
    | Level6 ANDTok Level5                  { PrimExp (AndP, [$1; $3]) }
    | Level6 ORTok Level5                   { PrimExp (OrP, [$1; $3]) }
    | Level5                                { $1 }

Level7:
    | Level7 DOUBLEEQTok Level6             { PrimExp (EqP, [$1; $3]) }
    | Level6                                { $1 }


// Listed below are which parts of the assignment are done, and which are not.

//‹stmt› ::= ‹expr› ;                              done
//  | ‹id› = ‹expr› ;                              done
//  | ‹expr› . ‹id› = ‹expr› ;                     done
//  | var ‹id› = ‹expr› ;                          done
//  | return ‹expr› ;                              done
//  | if ( ‹expr› ) { ‹stmt›* }                    done
//  | if ( ‹expr› ) { ‹stmt›* } else { ‹stmt›* }   done
//  | while ( ‹expr› ) { ‹stmt›* }                 done
//  | function ‹id› ( ‹paramlist› ) { ‹stmt›* }    done

//‹expr› ::= ‹int›                                 done
//  | ‹float›                                      done
//  | true                                         done
//  | false                                        done
//  | ‹id›                                         done
//  | ‹string›                                     done
//  | ( ‹expr› )                                   done
//  | ‹id› ( ‹arglist› )
//  | ( ‹expr› ) ( ‹arglist› )
//  | ‹expr› ‹binop› ‹expr›                        done
//  | ! ‹expr›                                     done
//  | ‹expr› . ‹id›                                done
//  | ‹expr› . ‹id› ( ‹arglist› )
//  | new ‹id› ( ‹arglist› )


