%{

open AST

%}

// The start token becomes a parser function in the compiled code:
%start start

// These are the terminal tokens of the grammar along with the types of
// the data carried by each token:
%token <int> INTTok
%token <double> DOUBLETok
%token ANDTok ORTok PLUSTok MINUSTok TIMESTok DIVTok
%token GTTok LTTok GEQTok LEQTok EQTok
%token SEMICOLONTok 
%token EOFTok

// This is the type of the data produced by a successful reduction of the 'start'
// symbol:
// JBC: note that since this gets put into the interface file, it must be fully qualified.
%type < AST.exp > start

%%

// These are the rules of the grammar along with the F# code of the 
// actions executed as rules are reduced.  In this case the actions 
// produce data using F# data construction terms.
start: Prog { (BeginExp $1) }

Prog:
	| EOFTok				{ [] }
        | INTTok SEMICOLONTok Prog              { (IntExp $1)::$3 }
        
